#ifndef _PROBABILITY_H_
#define _PROBABILITY_H_

#include <gsl/gsl_rng.h>
// Non-uniform distributions:
//There are a HUGE variety of distributions to choose from, which are
//  documented at the gsl website.
#include <gsl/gsl_randist.h>
// Seeding:
#include <sys/time.h>

//When using ANY gsl code, must add -lgsl -lgslcblas [-lm ???] to compile lines
//USE_LINK_FLAG -lgsl -lgslcblas

//RandGen is a virtual class.  Use it in function definitions,
//  but when DECLARING a random number generator, use one of its derived
//  classes, such as gsl_RandGen.
#define UNUSED_ARGUMENT(x) (void)x

class RandGen
{
 public:
  //Create a random number generator with Seed generated by system clock:
  RandGen() {}
  //Create a random number generator, and specify seed
  RandGen(const long & seed) {UNUSED_ARGUMENT(seed);}
  virtual ~RandGen() {}

  //uniform double on [0, 1):
  virtual double uniform(void) = 0;
  //uniform double on (0, 1):
  virtual double openUniform(void) = 0;
  //unsigned long int on [0, 1, 2, ..., n - 1]:
  virtual unsigned long unsignedInt(const unsigned long & n) = 0;
  // bool, true with probability p, false with probability 1-p:
  virtual bool bernoulli(const double & p) = 0;
  //exponentially distributed, p(x) ~ exp(-x/mu)
  virtual double exponential(const double & mu) = 0;
  //gaussian double with zero mean and standard deviation sigma:
  virtual double gaussian(const double & sigma) = 0;
  //poisson unsigned int with mean Mu:
  virtual unsigned int poisson(const double & mu) = 0;
  //binomial unsigned int for n trials with probability P of success
  virtual unsigned int binomial(const double & p, unsigned intnN) = 0;
};



class GslRandGen : public RandGen
{
 public:
  GslRandGen();
  GslRandGen(const long & seed);
  virtual ~GslRandGen();

  //uniform double on [0, 1):
  virtual double uniform(void);
  //uniform double on (0, 1):
  virtual double openUniform(void);
  //unsigned long int on [0, 1, 2, ..., n - 1]:
  virtual unsigned long unsignedInt(const unsigned long & n);

  // bool, true with probability p, false with probability 1-p:
  bool bernoulli(const double & p);

  //exponentially distributed, p(x) ~ exp(-x/mu)
  double exponential(const double & mu);
  //gaussian double with zero mean and standard deviation sigma:
  double gaussian(const double & sigma);
  //poisson unsigned int with mean Mu:
  unsigned int poisson(const double & mu);
  //binomial unsigned int for n trials with probability P of success
  unsigned int binomial(const double & p, unsigned intnN);
  
 private:
  gsl_rng* r;
  static bool firstInit;
};


#endif
