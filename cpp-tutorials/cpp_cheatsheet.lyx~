#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1in
\topmargin 1in
\rightmargin 1in
\bottommargin 1in
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
C++ cheatsheet
\end_layout

\begin_layout Section*
Starts / definitions
\end_layout

\begin_layout Standard
#include 
\begin_inset Quotes eld
\end_inset

filename
\begin_inset Quotes erd
\end_inset

 
\emph on
or
\emph default
 #include <filename> → should be in same directory
\end_layout

\begin_layout Standard
#define int table_size 10 
\end_layout

\begin_layout Standard
#define getmax(a,b) a>b ? a : b → define an inline function
\end_layout

\begin_layout Standard
#undef table_size → remove a previous definition
\end_layout

\begin_layout Standard
#ifdef / #ifndef → conditional based on previously (un)defined object →
 ends with #endif
\end_layout

\begin_layout Standard
#line number 
\begin_inset Quotes eld
\end_inset

filename
\begin_inset Quotes erd
\end_inset

 → 
\end_layout

\begin_layout Standard
#error → use e.g.: 
\begin_inset Quotes eld
\end_inset

#ifndef __cplusplus ↵ #error A C++ compiler is required ↵ #endif
\end_layout

\begin_layout Section*
Declarations
\end_layout

\begin_layout Subsection*
Constructors
\end_layout

\begin_layout Standard
Same name as function (but no type); called when new object of that class
 is created
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class CRectangle {
\end_layout

\begin_layout Plain Layout
\paragraph_spacing single

		int *x, *y;
\end_layout

\begin_layout Plain Layout

	public:
\end_layout

\begin_layout Plain Layout

		CRectangle (int, int); // constructor prototype
\end_layout

\begin_layout Plain Layout

		~CRectangle (); // destructor prototype
\end_layout

\begin_layout Plain Layout

		int area () {return (*x * *y);}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

CRectangle::CRectangle (int a, int b) { // constructor - no [leading] type
\end_layout

\begin_layout Plain Layout

	x = new int;	// dynamic allocation of mem
\end_layout

\begin_layout Plain Layout

	y = new int;
\end_layout

\begin_layout Plain Layout

	*x = a; *y = b;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

CRectangle::~CRectangle () { // destructor
\end_layout

\begin_layout Plain Layout

	delete x; delete y;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Namespace
\end_layout

\begin_layout Standard
Namespaces introduce objects into current declarative region
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

namespace myNamespace
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	int a, b;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
accessed outside by scope - myNamespace::a
\end_layout

\begin_layout Standard
using first::x 
\emph on
or
\emph default
 using namespace x;
\end_layout

\begin_layout Subsection*
Class
\end_layout

\begin_layout Standard
Use a class for most instances
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class square {
\end_layout

\begin_layout Plain Layout

	int x,y;
\end_layout

\begin_layout Plain Layout

	public:
\end_layout

\begin_layout Plain Layout

		void set_values (int, int);
\end_layout

\begin_layout Plain Layout

		int area () {return (x*y);} // inline function
\end_layout

\begin_layout Plain Layout

	};	// closes class
\end_layout

\begin_layout Plain Layout

void square::set_values (int a, int b) {
\end_layout

\begin_layout Plain Layout

	x = a; y = b;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Structure
\end_layout

\begin_layout Standard
A structure should only be used when all criteria are met:
\end_layout

\begin_layout Standard
1.
 it logically represents a single value, similar to primitive types (int,
 double, etc).
\end_layout

\begin_layout Standard
2.
 it has an instance size smaller than 16 bytes
\end_layout

\begin_layout Standard
3.
 it is immutable
\end_layout

\begin_layout Standard
4.
 it will not have to be boxed frequently
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

struct product {
\end_layout

\begin_layout Plain Layout

	int weight;
\end_layout

\begin_layout Plain Layout

	float price;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

product apple;
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Structure pointer
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

struct movies {
\end_layout

\begin_layout Plain Layout

	string title;
\end_layout

\begin_layout Plain Layout

	};
\end_layout

\begin_layout Plain Layout

movies amovie;
\end_layout

\begin_layout Plain Layout

movies *pmovie;
\end_layout

\begin_layout Plain Layout

pmovie = &amovie;
\end_layout

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

getline(cin, pmovie->title);
\end_layout

\begin_layout Plain Layout

cout << pmovie->title;
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Template
\end_layout

\begin_layout Standard
Generic template class
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

template <class T> 
\end_layout

\begin_layout Plain Layout

class mycontainer {
\end_layout

\begin_layout Plain Layout

		T element;
\end_layout

\begin_layout Plain Layout

	public:
\end_layout

\begin_layout Plain Layout

		mycontainer (T arg) {element=arg;}
\end_layout

\begin_layout Plain Layout

		T increase () {return ++element;}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Specialization template class:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

template <>	// explicitly declares as template specialization
\end_layout

\begin_layout Plain Layout

class mycontainer <char> { // declares type of specialization
\end_layout

\begin_layout Plain Layout

		char element;
\end_layout

\begin_layout Plain Layout

	public:
\end_layout

\begin_layout Plain Layout

		mycontainer (char arg) {element=arg;} // must declare -- see below
\end_layout

\begin_layout Plain Layout

		char uppercase () {
\end_layout

\begin_layout Plain Layout

			if ((element>='a') && (element<='z'))
\end_layout

\begin_layout Plain Layout

			element += 'A'-'a';
\end_layout

\begin_layout Plain Layout

			return element;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Even if these templates appeared in same code, the 
\emph on
mycontainer
\emph default
 declaration would be necessary since specialization templates do not inherit
 from generic templates, even if they are exactly equal.
\end_layout

\begin_layout Section*
Inheritance
\end_layout

\begin_layout Subsection*
Virtual members
\end_layout

\begin_layout Standard
Virtual members are members of a class that can be redefined in its derived
 classes
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

class CPolygon {
\end_layout

\begin_layout Plain Layout

	protected:
\end_layout

\begin_layout Plain Layout

		int width, height;
\end_layout

\begin_layout Plain Layout

	public:
\end_layout

\begin_layout Plain Layout

		void set_values (int a, int b)
\end_layout

\begin_layout Plain Layout

			{width = a; height = b;}
\end_layout

\begin_layout Plain Layout

		virtual int area () // defined as virtual - redefined later
\end_layout

\begin_layout Plain Layout

			{return (0);}
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

class CRectangle: public CPolygon { // inherits public aspects of CPolygon
\end_layout

\begin_layout Plain Layout

	public:
\end_layout

\begin_layout Plain Layout

		int area ()
\end_layout

\begin_layout Plain Layout

			{ return (width * height);}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Miscellaneous
\end_layout

\begin_layout Subsubsection*
Typedef
\end_layout

\begin_layout Standard
usage: 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

typedef existing_datatype new_datatype_name;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
example:
\end_layout

\end_body
\end_document
